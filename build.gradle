buildscript {
    repositories {
	   mavenCentral()
       jcenter()
       maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


def mod_file = getModFile()
group = "com.TheRPGAdventurer.ROTD" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "DragonMounts2"
version = "${mc_version}-${dm2_version}"
sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "snapshot_20171003"
    makeObfSourceJar = false 
    
    replace '@VERSION@', project.version
}

repositories {
    mavenCentral()
    maven {
        url "http://maven.mcmoddev.com/"
    }
	
	//maven {
   //   name = "Mobius Repo"
 //     url = "http://tehnut.info/maven"
//    }
   
  //  maven {
   //   name = "JEI"
   //   url = "http://dvs1.progwml6.com/files/maven"
  //  }
 
    maven {
      name = "gegy1000"
      url = "https://maven.gegy1000.net"
    }
	
	maven {
		url 'https://jitpack.io'
    }
}

dependencies {
   deobfCompile "net.ilexiconn:llibrary:1.7.14-1.12.2"
   compile "com.azanor:thaumcraft-api:6.1-beta23"
  // deobfCompile "com.github.azanor:Baubles:${baubles_version}"
  // deobfCompile "mcp.mobius.waila:Hwyla:1.8.25-B40_1.12"
  // runtime "mezz.jei:jei_1.12.2:4.9.1.181"   
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
	
String getModFile() {
  String path = ""
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.matches("@Mod\\s*\\(.*")) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getModField(String type, String mod_file) {
  if (mod_file.length() == 0) {
    return ""
  }
  String field = ""
  String prefix = "public static final String $type = \""
  File file = file(mod_file)
  file.eachLine { String s ->
    s = s.trim()
    if (s.startsWith(prefix)) {
      s = s.substring(prefix.length(), s.length() - 2)
      field = s
    }
  }
  return field
}